/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22D%3A%5C%5CGiramille%5C%5CGiramille-Clean%5C%5Cfrontend%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22D%3A%5C%5CGiramille%5C%5CGiramille-Clean%5C%5Cfrontend%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \**********************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.tsx */ \"(app-pages-browser)/./app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyRCUzQSU1QyU1Q0dpcmFtaWxsZSU1QyU1Q0dpcmFtaWxsZS1DbGVhbiU1QyU1Q2Zyb250ZW5kJTVDJTVDYXBwJTVDJTVDcGFnZS50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSxzSkFBNEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz8wYmE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiRDpcXFxcR2lyYW1pbGxlXFxcXEdpcmFtaWxsZS1DbGVhblxcXFxmcm9udGVuZFxcXFxhcHBcXFxccGFnZS50c3hcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22D%3A%5C%5CGiramille%5C%5CGiramille-Clean%5C%5Cfrontend%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLHFDQUFxQyxxQkFBTSxpRkFBaUYscUJBQU0sa0VBQWtFLHFCQUFNLFdBQVcsbUJBQU8sQ0FBQyw0R0FBNEI7O0FBRXpQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanM/ZTlhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfZ2xvYmFsX3Byb2Nlc3MsIF9nbG9iYWxfcHJvY2VzczE7XG5tb2R1bGUuZXhwb3J0cyA9ICgoX2dsb2JhbF9wcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MuZW52KSAmJiB0eXBlb2YgKChfZ2xvYmFsX3Byb2Nlc3MxID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MxLmVudikgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwucHJvY2VzcyA6IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/client-only/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/compiled/client-only/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {



/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLE9BQU8sZ0JBQWdCLG1CQUFtQixNQUFNLE1BQU0sNEJBQTRCLG1EQUFtRCwrQkFBK0IscURBQXFELFlBQVksSUFBSSxtQ0FBbUMsYUFBYSxLQUFLLG9CQUFvQixTQUFTLG1CQUFtQixJQUFJLHFDQUFxQyxlQUFlLEtBQUssdUJBQXVCLFNBQVMsdUJBQXVCLElBQUksdUJBQXVCLG1CQUFtQix1QkFBdUIsMkNBQTJDLGFBQWEsdUJBQXVCLElBQUksY0FBYyxTQUFTLElBQUksd0JBQXdCLFNBQVMsMEJBQTBCLDRCQUE0QixxQkFBcUIsdUJBQXVCLGdEQUFnRCxlQUFlLHVCQUF1QixJQUFJLFlBQVksU0FBUyxJQUFJLHNCQUFzQixTQUFTLHdCQUF3QixTQUFTLFlBQVksTUFBTSxTQUFTLDJCQUEyQixXQUFXLE9BQU8sUUFBUSxhQUFhLGNBQWMsS0FBSyxLQUFLLGFBQWEsY0FBYyxzQkFBc0IsTUFBTSxPQUFPLGtDQUFrQyxPQUFPLGVBQWUsU0FBUyxJQUFJLEtBQUssYUFBYSxNQUFNLFlBQVksS0FBSyxXQUFXLE9BQU8sUUFBUSxtQkFBbUIsdUJBQXVCLG9DQUFvQyx1QkFBdUIsWUFBWSxtQkFBbUIsS0FBSyxxQkFBcUIsc0JBQXNCLHFCQUFxQix5QkFBeUIsbUJBQW1CLFdBQVcsYUFBYSw4QkFBOEIsaUNBQWlDLGtCQUFrQixlQUFlLFNBQVMsVUFBVSxhQUFhLGNBQWMsaUJBQWlCLFVBQVUsbUJBQW1CLFlBQVksV0FBVyxzQkFBc0IsMEJBQTBCLFlBQVksdUJBQXVCLDJCQUEyQix3QkFBd0IsVUFBVSxzQkFBc0IscURBQXFELGlCQUFpQixXQUFXLG9CQUFvQixtREFBbUQsbUJBQW1CLFlBQVksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcz81Y2RjIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe3ZhciBlPXsyMjk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5leHBvcnRzPXt9O3ZhciByO3ZhciBuO2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9KGZ1bmN0aW9uKCl7dHJ5e2lmKHR5cGVvZiBzZXRUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtyPXNldFRpbWVvdXR9ZWxzZXtyPWRlZmF1bHRTZXRUaW1vdXR9fWNhdGNoKGUpe3I9ZGVmYXVsdFNldFRpbW91dH10cnl7aWYodHlwZW9mIGNsZWFyVGltZW91dD09PVwiZnVuY3Rpb25cIil7bj1jbGVhclRpbWVvdXR9ZWxzZXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe249ZGVmYXVsdENsZWFyVGltZW91dH19KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZSl7aWYocj09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGUsMCl9aWYoKHI9PT1kZWZhdWx0U2V0VGltb3V0fHwhcikmJnNldFRpbWVvdXQpe3I9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChlLDApfXRyeXtyZXR1cm4gcihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gci5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gci5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChlKXtpZihuPT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfWlmKChuPT09ZGVmYXVsdENsZWFyVGltZW91dHx8IW4pJiZjbGVhclRpbWVvdXQpe249Y2xlYXJUaW1lb3V0O3JldHVybiBjbGVhclRpbWVvdXQoZSl9dHJ5e3JldHVybiBuKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIG4uY2FsbCh0aGlzLGUpfX19dmFyIGk9W107dmFyIG89ZmFsc2U7dmFyIHU7dmFyIGE9LTE7ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCl7aWYoIW98fCF1KXtyZXR1cm59bz1mYWxzZTtpZih1Lmxlbmd0aCl7aT11LmNvbmNhdChpKX1lbHNle2E9LTF9aWYoaS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKG8pe3JldHVybn12YXIgZT1ydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7bz10cnVlO3ZhciB0PWkubGVuZ3RoO3doaWxlKHQpe3U9aTtpPVtdO3doaWxlKCsrYTx0KXtpZih1KXt1W2FdLnJ1bigpfX1hPS0xO3Q9aS5sZW5ndGh9dT1udWxsO289ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KGUpfXQubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt0W3ItMV09YXJndW1lbnRzW3JdfX1pLnB1c2gobmV3IEl0ZW0oZSx0KSk7aWYoaS5sZW5ndGg9PT0xJiYhbyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZSx0KXt0aGlzLmZ1bj1lO3RoaXMuYXJyYXk9dH1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTt0LnRpdGxlPVwiYnJvd3NlclwiO3QuYnJvd3Nlcj10cnVlO3QuZW52PXt9O3QuYXJndj1bXTt0LnZlcnNpb249XCJcIjt0LnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9dC5vbj1ub29wO3QuYWRkTGlzdGVuZXI9bm9vcDt0Lm9uY2U9bm9vcDt0Lm9mZj1ub29wO3QucmVtb3ZlTGlzdGVuZXI9bm9vcDt0LnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3QuZW1pdD1ub29wO3QucHJlcGVuZExpc3RlbmVyPW5vb3A7dC5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7dC5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119O3QuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07dC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07dC5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHIpe3ZhciBuPXRbcl07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT10W3JdPXtleHBvcnRzOnt9fTt2YXIgbz10cnVlO3RyeXtlW3JdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO289ZmFsc2V9ZmluYWxseXtpZihvKWRlbGV0ZSB0W3JdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciByPV9fbmNjd3Bja19yZXF1aXJlX18oMjI5KTttb2R1bGUuZXhwb3J0cz1yfSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ HomePage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ \"(app-pages-browser)/./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst BG = \"/static/stage1/stage-1-bg.jpg\";\nconst UI = \"/static/stage1/stage-1-UI.png\";\nconst DESIGN_W = 1280;\nconst DESIGN_H = 720;\nfunction HomePage() {\n    _s();\n    const [scale, setScale] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(1);\n    const [baseW, setBaseW] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(DESIGN_W);\n    const [baseH, setBaseH] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(DESIGN_H);\n    const [prompt, setPrompt] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [historyImgs, setHistoryImgs] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([\n        // Add some test images to make scrollbar visible\n        \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><rect width=\"512\" height=\"512\" fill=\"#ff6b6b\"/><text x=\"20\" y=\"48\" font-size=\"20\" fill=\"#fff\">Test 1</text></svg>'),\n        \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><rect width=\"512\" height=\"512\" fill=\"#4ecdc4\"/><text x=\"20\" y=\"48\" font-size=\"20\" fill=\"#fff\">Test 2</text></svg>'),\n        \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><rect width=\"512\" height=\"512\" fill=\"#45b7d1\"/><text x=\"20\" y=\"48\" font-size=\"20\" fill=\"#fff\">Test 3</text></svg>'),\n        \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><rect width=\"512\" height=\"512\" fill=\"#96ceb4\"/><text x=\"20\" y=\"48\" font-size=\"20\" fill=\"#fff\">Test 4</text></svg>'),\n        \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><rect width=\"512\" height=\"512\" fill=\"#feca57\"/><text x=\"20\" y=\"48\" font-size=\"20\" fill=\"#fff\">Test 5</text></svg>'),\n        \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><rect width=\"512\" height=\"512\" fill=\"#ff9ff3\"/><text x=\"20\" y=\"48\" font-size=\"20\" fill=\"#fff\">Test 6</text></svg>'),\n        \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><rect width=\"512\" height=\"512\" fill=\"#54a0ff\"/><text x=\"20\" y=\"48\" font-size=\"20\" fill=\"#fff\">Test 7</text></svg>'),\n        \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"><rect width=\"512\" height=\"512\" fill=\"#5f27cd\"/><text x=\"20\" y=\"48\" font-size=\"20\" fill=\"#fff\">Test 8</text></svg>')\n    ]);\n    const [preview, setPreview] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [calib, setCalib] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [drag, setDrag] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const bgRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const [rects, setRects] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>{\n        const def = {\n            prompt: {\n                l: 60,\n                t: 180,\n                w: 350,\n                h: 270\n            },\n            vecBtn: {\n                l: 510,\n                t: 325,\n                w: 280,\n                h: 105\n            },\n            pngBtn: {\n                l: 510,\n                t: 490,\n                w: 280,\n                h: 105\n            },\n            hist: {\n                l: 935,\n                t: 192,\n                w: 320,\n                h: 398\n            }\n        };\n        try {\n            const saved = localStorage.getItem(\"ui_rects\");\n            if (saved) return {\n                ...def,\n                ...JSON.parse(saved)\n            };\n        } catch (e) {}\n        return def;\n    });\n    function saveRects(next) {\n        setRects(next);\n        try {\n            localStorage.setItem(\"ui_rects\", JSON.stringify(next));\n        } catch (e) {}\n    }\n    function recalcScale(nextW) {\n        const vw = window.innerWidth;\n        const s = vw / nextW;\n        setScale(s);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        function onResize() {\n            recalcScale(baseW);\n        }\n        window.addEventListener(\"resize\", onResize);\n        return ()=>window.removeEventListener(\"resize\", onResize);\n    }, [\n        baseW\n    ]);\n    const kx = baseW / DESIGN_W;\n    const ky = baseH / DESIGN_H;\n    const toStyle = (r)=>({\n            left: r.l * kx,\n            top: r.t * ky,\n            width: r.w * kx,\n            height: r.h * ky\n        });\n    const startDrag = (e, key)=>{\n        if (!calib) return;\n        e.preventDefault();\n        setDrag({\n            key,\n            dx: e.clientX,\n            dy: e.clientY\n        });\n    };\n    const onMove = (e)=>{\n        if (!drag) return;\n        const { key, dx, dy } = drag;\n        const dpx = (e.clientX - dx) / kx;\n        const dpy = (e.clientY - dy) / ky;\n        const cur = rects[key];\n        const next = {\n            ...rects,\n            [key]: {\n                ...cur,\n                l: Math.max(0, cur.l + dpx),\n                t: Math.max(0, cur.t + dpy)\n            }\n        };\n        setDrag({\n            key,\n            dx: e.clientX,\n            dy: e.clientY\n        });\n        saveRects(next);\n    };\n    const endDrag = ()=>setDrag(null);\n    // Dataset images mapping for Giramille style\n    const datasetImages = {\n        // Animals\n        \"bird\": [\n            \"Passaros.png\",\n            \"borboleta cozinhando.png\",\n            \"borboletinha.png\",\n            \"borbolitinha.png\"\n        ],\n        \"cat\": [\n            \"Cat.jpg\",\n            \"Cat.png\"\n        ],\n        \"dog\": [\n            \"Dog.jpg\",\n            \"Dog.png\",\n            \"Dog-Femea.png\",\n            \"Dog-menina.png\",\n            \"Dog-menino.png\",\n            \"dog-correndo.png\"\n        ],\n        \"fish\": [\n            \"peixe.png\",\n            \"salmao.png\",\n            \"pirarucu1.png\"\n        ],\n        \"butterfly\": [\n            \"borboleta cozinhando.png\",\n            \"borboletinha.png\",\n            \"borbolitinha.png\"\n        ],\n        \"horse\": [\n            \"Horse.jpg\",\n            \"Cavalinho.png\"\n        ],\n        \"bear\": [\n            \"Bear.jpg\"\n        ],\n        \"chick\": [\n            \"Chick.jpg\",\n            \"Chick2.jpg\",\n            \"PINTINHO_1.png\",\n            \"pintinho_2.png\",\n            \"pintinho.png\"\n        ],\n        \"ant\": [\n            \"Ant.jpg\"\n        ],\n        \"frog\": [\n            \"sapo-pirata.png\",\n            \"sapo.png\"\n        ],\n        \"crocodile\": [\n            \"Jacar\\xe9.png\"\n        ],\n        \"moose\": [\n            \"alce.jpg\"\n        ],\n        \"t-rex\": [\n            \"T-Rex.jpg\"\n        ],\n        \"fairy\": [\n            \"Fairy.jpg\"\n        ],\n        \"witch\": [\n            \"Witch.jpg\"\n        ],\n        // Objects\n        \"car\": [\n            \"Carros.jpg\",\n            \"Carrinho.png\",\n            \"Jeep 3-4.png\",\n            \"Jeep poses.png\"\n        ],\n        \"airplane\": [\n            \"aviao.jpg\"\n        ],\n        \"train\": [\n            \"Train.jpg\",\n            \"train.png\",\n            \"Train Lado.png\",\n            \"Train Virando.png\",\n            \"frente trem.png\"\n        ],\n        \"bus\": [\n            \"Bus.jpg\",\n            \"Onibus.jpg\"\n        ],\n        \"boat\": [\n            \"Barcos.jpg\",\n            \"boat-trail.png\"\n        ],\n        \"house\": [\n            \"Casa da Giramille.png\",\n            \"Casa Giramille.png\",\n            \"Casa-Giramille.png\",\n            \"Casa-dentro.png\"\n        ],\n        \"castle\": [\n            \"Castelo_final 01.png\",\n            \"Castelo-Salao-Nobre.png\"\n        ],\n        \"tree\": [\n            \"Maple tree.png\",\n            \"floresta [Converted].png\",\n            \"Floresta.png\",\n            \"clipart-for-tree-11.png\"\n        ],\n        \"flower\": [\n            \"Margarida.png\",\n            \"Campo de flores.png\",\n            \"Campo de flores Colorido.png\"\n        ],\n        \"hat\": [\n            \"chape.png\",\n            \"chapeu.png\",\n            \"sombrero M.png\",\n            \"hat-icon-5277590_1280.png\"\n        ],\n        \"star\": [\n            \"estrela.jpg\",\n            \"Estrelinha.png\",\n            \"Estrelinha pt 2.png\",\n            \"10df7ee30a45905aca812b9d082366d8-oito-pontas-estrela-marrom.png\"\n        ],\n        \"heart\": [\n            \"Coracao.png\",\n            \"Coracao-png.png\",\n            \"Cora\\xe7\\xf5es PNG-01.png\",\n            \"cora\\xe7\\xe3o girafa.png\"\n        ],\n        \"sun\": [\n            \"Sol Brilhar-01.png\",\n            \"Nuvens e Sol.jpg\"\n        ],\n        \"moon\": [\n            \"lua grande.png\"\n        ],\n        \"cloud\": [\n            \"Nuvens e Sol.jpg\"\n        ],\n        \"ball\": [\n            \"popsicle.png\",\n            \"picole.png\"\n        ],\n        \"book\": [\n            \"Livrinho.png\",\n            \"Livro1.png\"\n        ],\n        \"cup\": [\n            \"caneca cor1.png\",\n            \"caneca cor2.png\",\n            \"caneca cor3.png\",\n            \"copo GiramilleC.png\"\n        ],\n        \"crown\": [\n            \"coroa.png\"\n        ],\n        \"key\": [\n            \"Chave.png\"\n        ],\n        \"coin\": [\n            \"Moedas-01-01.png\"\n        ],\n        \"guitar\": [\n            \"Viol\\xe3o.png\"\n        ],\n        \"phone\": [\n            \"celular.png\"\n        ],\n        \"shoes\": [\n            \"Sapato - Loira.png\",\n            \"salto alto brilhante.png\"\n        ],\n        \"sofa\": [\n            \"sofa.png\"\n        ],\n        \"bed\": [\n            \"Cama da Giramille -2.png\",\n            \"cama.png\",\n            \"cama_1.png\"\n        ],\n        \"table\": [\n            \"Mesa Parabens.png\"\n        ],\n        \"chair\": [\n            \"Suporte do Guga.png\",\n            \"Suporte Guga.png\"\n        ],\n        \"lamp\": [\n            \"luz.png\"\n        ],\n        \"tv\": [\n            \"Icone_tv.jpg\"\n        ],\n        \"music\": [\n            \"music.png\"\n        ],\n        \"game\": [\n            \"games.png\"\n        ],\n        \"social\": [\n            \"social.png\"\n        ],\n        // Scenes/Backgrounds\n        \"forest\": [\n            \"floresta [Converted].png\",\n            \"Floresta.png\",\n            \"fundo mata.png\",\n            \"forest.jpg\"\n        ],\n        \"beach\": [\n            \"praia.png\",\n            \"Fundo-praia-vinheta.png\",\n            \"mar2.png\"\n        ],\n        \"mountain\": [\n            \"montanha.png\",\n            \"montanha_1.png\"\n        ],\n        \"city\": [\n            \"Nova York - Paisagem.jpg\",\n            \"Empire State.jpg\",\n            \"Times Square.jpg\",\n            \"Central Park.jpg\",\n            \"Museu de Arte de Nova York.jpg\",\n            \"Rockefeller Center.jpg\",\n            \"Ponte Brooklin.jpg\"\n        ],\n        \"school\": [\n            \"escola.jpg\",\n            \"Sala de aula.png\",\n            \"Sala Recreativa.png\",\n            \"Lousa-Video-Aula.png\",\n            \"lousa.png\"\n        ],\n        \"farm\": [\n            \"fazenda.png\",\n            \"Cen\\xe1rio Celeiro.png\"\n        ],\n        \"prison\": [\n            \"Pris\\xe3o-01.png\"\n        ],\n        \"stage\": [\n            \"palco.png\",\n            \"Ref - Show.jpg\",\n            \"show.png\"\n        ],\n        \"park\": [\n            \"Central Park.jpg\"\n        ],\n        \"bridge\": [\n            \"Ponte Brooklin.jpg\"\n        ],\n        \"statue\": [\n            \"Est\\xe1tua da Liberdade (ela fica numa ilha).jpg\"\n        ],\n        \"sky\": [\n            \"C\\xe9u.png\",\n            \"Ceu surgindo.png\"\n        ],\n        \"ground\": [\n            \"ch\\xe3o.jpg\",\n            \"grass.jpg\"\n        ],\n        \"wood\": [\n            \"madeira.png\"\n        ],\n        \"water\": [\n            \"Traco na agua.png\"\n        ],\n        \"rail\": [\n            \"trilho-s.png\",\n            \"trilho2.png\"\n        ],\n        // Food\n        \"apple\": [\n            \"apple.png\"\n        ],\n        \"bread\": [\n            \"pao.png\"\n        ],\n        \"milk\": [\n            \"Leite.png\",\n            \"leite em po.png\"\n        ],\n        \"banana\": [\n            \"Bananinhas.png\"\n        ],\n        \"ice cream\": [\n            \"popsicle.png\",\n            \"picole.png\"\n        ],\n        \"fish food\": [\n            \"Racao cats.png\",\n            \"Racao dogs.png\",\n            \"Dog-Food-02.png\"\n        ],\n        // Characters\n        \"giramille\": [\n            \"Pai-Francisco.png\",\n            \"Girafa_corpo.png\"\n        ],\n        \"indian\": [\n            \"Indios.png\",\n            \"Indios2.png\",\n            \"India1.png\",\n            \"India2.png\"\n        ],\n        \"firefighter\": [\n            \"Bombeiro.jpg\"\n        ],\n        \"chef\": [\n            \"borboleta cozinhando.png\",\n            \"borboleta cozinhando_1.png\"\n        ],\n        // Items\n        \"wand\": [\n            \"VARINHA-GIRAFA.png\"\n        ],\n        \"fishing rod\": [\n            \"vara_pescar.png\"\n        ],\n        \"surfboard\": [\n            \"Surfboard_clip_art_hight.png\"\n        ],\n        \"mask\": [\n            \"kisspng-zorro-dominoes-domino-mask-computer-icons-mask-black-5b3093633591a8.1803331115299101152194.png\"\n        ],\n        \"flag\": [\n            \"bandeira-do-quadrado-da-textura-do-giz-no-quadro-negro-50077734.jpg\"\n        ],\n        \"map\": [\n            \"Mapa Mundi.png\"\n        ],\n        \"leaf\": [\n            \"folha.png\",\n            \"folha canada.png\"\n        ],\n        \"rainbow\": [\n            \"rainbow-clipart-84-700x409.png\",\n            \"9436a75cdabae1ea6e7cacb9f3bb952d-desenho-colorido-arco-iris.png\"\n        ],\n        \"clothespin\": [\n            \"prendedor.png\"\n        ],\n        \"belt\": [\n            \"Cinturao_Prancheta 1.png\"\n        ],\n        \"tutu\": [\n            \"tutu_Prancheta 1.png\"\n        ],\n        \"bow\": [\n            \"La\\xe7o Giramille.jpg\",\n            \"lanco.png\"\n        ],\n        \"frame\": [\n            \"Moldura retangular2.png\"\n        ],\n        \"sign\": [\n            \"Placa_madeira.png\",\n            \"Placa_madeira_logo.png\",\n            \"Plaquinha_Vetor.png\"\n        ],\n        // Colors\n        \"red\": [\n            \"vermelho.png\",\n            \"Coracao.png\"\n        ],\n        \"blue\": [\n            \"azul.png\"\n        ],\n        \"green\": [\n            \"verde.png\"\n        ],\n        \"yellow\": [\n            \"amarelo.png\"\n        ],\n        \"purple\": [\n            \"roxo.png\"\n        ],\n        \"pink\": [\n            \"rosa.png\"\n        ],\n        \"brown\": [\n            \"marrom.png\"\n        ],\n        \"black\": [\n            \"preto.png\"\n        ],\n        \"white\": [\n            \"branco.png\"\n        ],\n        \"orange\": [\n            \"laranja.png\"\n        ],\n        // Holidays/Events\n        \"christmas\": [\n            \"Natal-2.png\",\n            \"christmas-background-with-pastel-bokeh-lights-stars-design.jpg\"\n        ],\n        \"easter\": [\n            \"P\\xe1scoa.png\"\n        ],\n        \"birthday\": [\n            \"anivers\\xe1rio.png\",\n            \"bg_aniver P\\xe1gina 2.png\"\n        ],\n        \"congratulations\": [\n            \"Parab\\xe9ns.png\"\n        ],\n        // Hygiene/Products\n        \"shampoo\": [\n            \"shampoo.png\",\n            \"shampoo-2.png\",\n            \"shampoo 1.png\",\n            \"shampoo2.png\"\n        ],\n        \"soap\": [\n            \"sabonete.png\"\n        ],\n        \"toothbrush\": [\n            \"pasta escova de dente.png\"\n        ],\n        \"mouthwash\": [\n            \"Enxaguante bucal.png\"\n        ],\n        \"dental floss\": [\n            \"fio dental.png\"\n        ],\n        \"diaper\": [\n            \"fraldas.png\"\n        ],\n        \"diaper cream\": [\n            \"Pomada para assaduras.png\"\n        ],\n        \"conditioner\": [\n            \"condicionador.png\"\n        ],\n        \"wet wipes\": [\n            \"len\\xe7o umedecido.png\"\n        ],\n        \"hand sanitizer\": [\n            \"gel antisseptico.png\"\n        ]\n    };\n    const generateImageFromPrompt = async (prompt, type)=>{\n        console.log(\"AI Image Generation - Prompt:\", prompt, \"Type:\", type);\n        try {\n            console.log(\"\\uD83D\\uDD04 Calling backend API...\");\n            // Call backend API for AI generation\n            const response = await fetch(\"http://localhost:5000/generate\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    prompt: prompt,\n                    style: type === \"vector\" ? \"cartoon\" : \"cartoon\",\n                    quality: \"balanced\",\n                    width: 512,\n                    height: 512\n                })\n            });\n            console.log(\"\\uD83D\\uDCE1 API Response status:\", response.status);\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            if (data.success && data.image) {\n                console.log(\"✅ AI Generated image from backend:\", data.image.length);\n                return data.image;\n            } else {\n                throw new Error(\"No image generated\");\n            }\n        } catch (error) {\n            console.error(\"❌ Backend API error:\", error);\n            // Fallback to local generation\n            console.log(\"\\uD83D\\uDD04 Using fallback local generation...\");\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = 512;\n            canvas.height = 512;\n            const ctx = canvas.getContext(\"2d\");\n            ctx.clearRect(0, 0, 512, 512);\n            generateAIArt(ctx, prompt, type);\n            return canvas.toDataURL(\"image/png\");\n        }\n    };\n    const generateAIArt = (ctx, prompt, type)=>{\n        const lowerPrompt = prompt.toLowerCase();\n        // AI Style Analysis\n        const isRealistic = lowerPrompt.includes(\"realistic\") || lowerPrompt.includes(\"photo\") || lowerPrompt.includes(\"photograph\");\n        const isCartoon = lowerPrompt.includes(\"cartoon\") || lowerPrompt.includes(\"anime\") || lowerPrompt.includes(\"manga\");\n        const isAbstract = lowerPrompt.includes(\"abstract\") || lowerPrompt.includes(\"artistic\") || lowerPrompt.includes(\"creative\");\n        const isMinimalist = lowerPrompt.includes(\"minimal\") || lowerPrompt.includes(\"simple\") || lowerPrompt.includes(\"clean\");\n        // Color Analysis\n        const colors = extractColorsFromPrompt(prompt);\n        const primaryColor = colors.primary;\n        const secondaryColor = colors.secondary;\n        const accentColor = colors.accent;\n        // Object Detection\n        const objects = detectObjectsInPrompt(prompt);\n        if (type === \"png\") {\n            generatePNGStyle(ctx, prompt, objects, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon, isAbstract, isMinimalist);\n        } else {\n            generateVectorStyle(ctx, prompt, objects, primaryColor, secondaryColor, accentColor, isMinimalist);\n        }\n    };\n    const extractColorsFromPrompt = (prompt)=>{\n        const lowerPrompt = prompt.toLowerCase();\n        const colorMap = {\n            \"red\": \"#ff4757\",\n            \"blue\": \"#3742fa\",\n            \"green\": \"#2ed573\",\n            \"yellow\": \"#ffa502\",\n            \"purple\": \"#5f27cd\",\n            \"orange\": \"#ff6348\",\n            \"pink\": \"#ff3838\",\n            \"brown\": \"#8b4513\",\n            \"black\": \"#2c2c54\",\n            \"white\": \"#f8f9fa\",\n            \"gray\": \"#57606f\",\n            \"cyan\": \"#0abde3\",\n            \"magenta\": \"#ff6b6b\",\n            \"lime\": \"#32ff7e\",\n            \"indigo\": \"#4834d4\",\n            \"violet\": \"#9c88ff\"\n        };\n        const foundColors = [];\n        for (const [colorName, colorValue] of Object.entries(colorMap)){\n            if (lowerPrompt.includes(colorName)) {\n                foundColors.push(colorValue);\n            }\n        }\n        return {\n            primary: foundColors[0] || \"#4ecdc4\",\n            secondary: foundColors[1] || \"#ff6b6b\",\n            accent: foundColors[2] || \"#feca57\"\n        };\n    };\n    const detectObjectsInPrompt = (prompt)=>{\n        const lowerPrompt = prompt.toLowerCase();\n        const objectKeywords = {\n            \"house\": [\n                \"house\",\n                \"home\",\n                \"building\",\n                \"casa\",\n                \"casa\"\n            ],\n            \"car\": [\n                \"car\",\n                \"vehicle\",\n                \"auto\",\n                \"carro\"\n            ],\n            \"tree\": [\n                \"tree\",\n                \"plant\",\n                \"forest\",\n                \"\\xe1rvore\"\n            ],\n            \"person\": [\n                \"person\",\n                \"people\",\n                \"man\",\n                \"woman\",\n                \"child\",\n                \"pessoa\"\n            ],\n            \"animal\": [\n                \"cat\",\n                \"dog\",\n                \"bird\",\n                \"fish\",\n                \"animal\",\n                \"gato\",\n                \"cachorro\"\n            ],\n            \"nature\": [\n                \"mountain\",\n                \"ocean\",\n                \"sky\",\n                \"cloud\",\n                \"sun\",\n                \"moon\",\n                \"montanha\"\n            ],\n            \"food\": [\n                \"food\",\n                \"fruit\",\n                \"apple\",\n                \"banana\",\n                \"comida\"\n            ],\n            \"abstract\": [\n                \"abstract\",\n                \"pattern\",\n                \"design\",\n                \"art\",\n                \"arte\"\n            ]\n        };\n        const detectedObjects = [];\n        for (const [category, keywords] of Object.entries(objectKeywords)){\n            if (keywords.some((keyword)=>lowerPrompt.includes(keyword))) {\n                detectedObjects.push(category);\n            }\n        }\n        return detectedObjects.length > 0 ? detectedObjects : [\n            \"abstract\"\n        ];\n    };\n    const generatePNGStyle = (ctx, prompt, objects, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon, isAbstract, isMinimalist)=>{\n        // AI-Generated PNG Style Art\n        // Background\n        if (isAbstract) {\n            // Abstract background\n            const gradient = ctx.createRadialGradient(256, 256, 0, 256, 256, 300);\n            gradient.addColorStop(0, primaryColor + \"40\");\n            gradient.addColorStop(0.5, secondaryColor + \"20\");\n            gradient.addColorStop(1, accentColor + \"10\");\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, 512, 512);\n        } else {\n            // Realistic background\n            const gradient = ctx.createLinearGradient(0, 0, 512, 512);\n            gradient.addColorStop(0, primaryColor + \"30\");\n            gradient.addColorStop(1, secondaryColor + \"20\");\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, 512, 512);\n        }\n        // Add AI-generated elements based on detected objects\n        objects.forEach((obj, index)=>{\n            drawAIObject(ctx, obj, primaryColor, secondaryColor, accentColor, index, isRealistic, isCartoon, isAbstract);\n        });\n        // Add AI-generated details\n        addAIDetails(ctx, prompt, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon, isAbstract);\n        // Add prompt as watermark\n        ctx.fillStyle = \"rgba(0,0,0,0.3)\";\n        ctx.font = \"bold 16px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(prompt, 256, 480);\n    };\n    const generateVectorStyle = (ctx, prompt, objects, primaryColor, secondaryColor, accentColor, isMinimalist)=>{\n        // AI-Generated Vector Style Art\n        // Clean background\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, 512, 512);\n        // Vector elements\n        objects.forEach((obj, index)=>{\n            drawVectorObject(ctx, obj, primaryColor, secondaryColor, accentColor, index, isMinimalist);\n        });\n        // Add vector details\n        addVectorDetails(ctx, prompt, primaryColor, secondaryColor, accentColor, isMinimalist);\n        // Add prompt as watermark\n        ctx.fillStyle = \"rgba(0,0,0,0.5)\";\n        ctx.font = \"bold 14px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(prompt, 256, 480);\n    };\n    const drawAIObject = (ctx, object, primaryColor, secondaryColor, accentColor, index, isRealistic, isCartoon, isAbstract)=>{\n        const x = 100 + index * 150 + Math.random() * 100;\n        const y = 150 + Math.random() * 200;\n        const size = 60 + Math.random() * 80;\n        ctx.fillStyle = primaryColor;\n        ctx.strokeStyle = secondaryColor;\n        ctx.lineWidth = isRealistic ? 2 : 4;\n        switch(object){\n            case \"house\":\n                drawAIHouse(ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon);\n                break;\n            case \"car\":\n                drawAICar(ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon);\n                break;\n            case \"tree\":\n                drawAITree(ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon);\n                break;\n            case \"person\":\n                drawAIPerson(ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon);\n                break;\n            case \"animal\":\n                drawAIAnimal(ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon);\n                break;\n            case \"nature\":\n                drawAINature(ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon);\n                break;\n            case \"food\":\n                drawAIFood(ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon);\n                break;\n            default:\n                drawAIAbstract(ctx, x, y, size, primaryColor, secondaryColor, accentColor, isAbstract);\n        }\n    };\n    const drawAIHouse = (ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon)=>{\n        // AI-Generated House\n        ctx.fillStyle = primaryColor;\n        // House base\n        ctx.fillRect(x - size / 2, y - size / 3, size, size * 0.6);\n        // Roof\n        ctx.fillStyle = secondaryColor;\n        ctx.beginPath();\n        ctx.moveTo(x - size / 2, y - size / 3);\n        ctx.lineTo(x, y - size / 2);\n        ctx.lineTo(x + size / 2, y - size / 3);\n        ctx.closePath();\n        ctx.fill();\n        // Door\n        ctx.fillStyle = accentColor;\n        ctx.fillRect(x - size / 8, y - size / 6, size / 4, size / 3);\n        // Windows\n        ctx.fillStyle = \"#87ceeb\";\n        ctx.fillRect(x - size / 3, y - size / 4, size / 6, size / 6);\n        ctx.fillRect(x + size / 6, y - size / 4, size / 6, size / 6);\n        // Add AI details\n        if (isRealistic) {\n            // Add shadows and highlights\n            ctx.fillStyle = \"rgba(0,0,0,0.2)\";\n            ctx.fillRect(x - size / 2, y + size / 6, size, 4);\n        }\n    };\n    const drawAICar = (ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon)=>{\n        // AI-Generated Car\n        ctx.fillStyle = primaryColor;\n        // Car body\n        ctx.fillRect(x - size / 2, y - size / 4, size, size / 2);\n        // Wheels\n        ctx.fillStyle = \"#2c2c54\";\n        ctx.beginPath();\n        ctx.arc(x - size / 3, y + size / 4, size / 8, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x + size / 3, y + size / 4, size / 8, 0, 2 * Math.PI);\n        ctx.fill();\n        // Windows\n        ctx.fillStyle = \"#87ceeb\";\n        ctx.fillRect(x - size / 3, y - size / 6, size / 3, size / 6);\n    };\n    const drawAITree = (ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon)=>{\n        // AI-Generated Tree\n        // Trunk\n        ctx.fillStyle = \"#8b4513\";\n        ctx.fillRect(x - size / 12, y - size / 6, size / 6, size / 3);\n        // Leaves\n        ctx.fillStyle = primaryColor;\n        ctx.beginPath();\n        ctx.arc(x, y - size / 3, size / 3, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawAIPerson = (ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon)=>{\n        // AI-Generated Person\n        // Head\n        ctx.fillStyle = primaryColor;\n        ctx.beginPath();\n        ctx.arc(x, y - size / 3, size / 6, 0, 2 * Math.PI);\n        ctx.fill();\n        // Body\n        ctx.fillStyle = secondaryColor;\n        ctx.fillRect(x - size / 8, y - size / 6, size / 4, size / 3);\n        // Arms\n        ctx.fillRect(x - size / 4, y - size / 8, size / 6, size / 8);\n        ctx.fillRect(x + size / 12, y - size / 8, size / 6, size / 8);\n        // Legs\n        ctx.fillRect(x - size / 12, y + size / 8, size / 12, size / 4);\n        ctx.fillRect(x, y + size / 8, size / 12, size / 4);\n    };\n    const drawAIAnimal = (ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon)=>{\n        // AI-Generated Animal (generic)\n        ctx.fillStyle = primaryColor;\n        // Body\n        ctx.beginPath();\n        ctx.ellipse(x, y, size / 3, size / 4, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        // Head\n        ctx.beginPath();\n        ctx.arc(x, y - size / 4, size / 6, 0, 2 * Math.PI);\n        ctx.fill();\n        // Ears\n        ctx.fillStyle = secondaryColor;\n        ctx.beginPath();\n        ctx.arc(x - size / 8, y - size / 3, size / 12, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x + size / 8, y - size / 3, size / 12, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawAINature = (ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon)=>{\n        // AI-Generated Nature element\n        ctx.fillStyle = primaryColor;\n        // Mountain\n        ctx.beginPath();\n        ctx.moveTo(x - size / 2, y + size / 4);\n        ctx.lineTo(x, y - size / 4);\n        ctx.lineTo(x + size / 2, y + size / 4);\n        ctx.closePath();\n        ctx.fill();\n        // Sun\n        ctx.fillStyle = accentColor;\n        ctx.beginPath();\n        ctx.arc(x + size / 3, y - size / 3, size / 8, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawAIFood = (ctx, x, y, size, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon)=>{\n        // AI-Generated Food\n        ctx.fillStyle = primaryColor;\n        // Apple\n        ctx.beginPath();\n        ctx.arc(x, y, size / 4, 0, 2 * Math.PI);\n        ctx.fill();\n        // Stem\n        ctx.fillStyle = secondaryColor;\n        ctx.fillRect(x - size / 16, y - size / 4, size / 8, size / 8);\n    };\n    const drawAIAbstract = (ctx, x, y, size, primaryColor, secondaryColor, accentColor, isAbstract)=>{\n        // AI-Generated Abstract Art\n        ctx.fillStyle = primaryColor;\n        // Abstract shapes\n        for(let i = 0; i < 5; i++){\n            const angle = i * Math.PI * 2 / 5;\n            const shapeX = x + Math.cos(angle) * size / 3;\n            const shapeY = y + Math.sin(angle) * size / 3;\n            ctx.beginPath();\n            ctx.arc(shapeX, shapeY, size / 8, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n    };\n    const drawVectorObject = (ctx, object, primaryColor, secondaryColor, accentColor, index, isMinimalist)=>{\n        const x = 100 + index * 150 + Math.random() * 100;\n        const y = 150 + Math.random() * 200;\n        const size = 40 + Math.random() * 60;\n        ctx.fillStyle = primaryColor;\n        ctx.strokeStyle = secondaryColor;\n        ctx.lineWidth = 3;\n        // Simplified vector versions\n        switch(object){\n            case \"house\":\n                // Simple vector house\n                ctx.fillRect(x - size / 2, y - size / 3, size, size * 0.6);\n                ctx.beginPath();\n                ctx.moveTo(x - size / 2, y - size / 3);\n                ctx.lineTo(x, y - size / 2);\n                ctx.lineTo(x + size / 2, y - size / 3);\n                ctx.closePath();\n                ctx.fill();\n                break;\n            case \"car\":\n                // Simple vector car\n                ctx.fillRect(x - size / 2, y - size / 4, size, size / 2);\n                break;\n            default:\n                // Generic vector shape\n                ctx.beginPath();\n                ctx.arc(x, y, size / 2, 0, 2 * Math.PI);\n                ctx.fill();\n        }\n    };\n    const addAIDetails = (ctx, prompt, primaryColor, secondaryColor, accentColor, isRealistic, isCartoon, isAbstract)=>{\n        // Add AI-generated atmospheric details\n        if (isRealistic) {\n            // Add realistic details\n            ctx.fillStyle = \"rgba(255,255,255,0.1)\";\n            for(let i = 0; i < 20; i++){\n                ctx.fillRect(Math.random() * 512, Math.random() * 512, 2, 2);\n            }\n        } else if (isCartoon) {\n            // Add cartoon details\n            ctx.fillStyle = accentColor;\n            for(let i = 0; i < 10; i++){\n                ctx.beginPath();\n                ctx.arc(Math.random() * 512, Math.random() * 512, 3, 0, 2 * Math.PI);\n                ctx.fill();\n            }\n        }\n    };\n    const addVectorDetails = (ctx, prompt, primaryColor, secondaryColor, accentColor, isMinimalist)=>{\n        // Add vector details\n        ctx.strokeStyle = accentColor;\n        ctx.lineWidth = 2;\n        // Add geometric lines\n        for(let i = 0; i < 5; i++){\n            ctx.beginPath();\n            ctx.moveTo(Math.random() * 512, Math.random() * 512);\n            ctx.lineTo(Math.random() * 512, Math.random() * 512);\n            ctx.stroke();\n        }\n    };\n    // Legacy function - now replaced by AI generation system\n    const generateDynamicContent = (ctx, color, prompt, type)=>{\n        // This function is now deprecated - using AI generation instead\n        generateAIArt(ctx, prompt, type);\n    };\n    // Legacy functions removed - using new AI generation system instead\n    // Drawing functions for different objects\n    const drawHat = (ctx, x, y, color)=>{\n        // Hat crown\n        ctx.beginPath();\n        ctx.ellipse(x, y - 10, 25, 15, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        // Hat brim\n        ctx.beginPath();\n        ctx.ellipse(x, y + 5, 35, 8, 0, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawVectorHat = (ctx, x, y, color)=>{\n        // Simple hat\n        ctx.beginPath();\n        ctx.ellipse(x, y - 15, 30, 20, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.ellipse(x, y + 10, 40, 10, 0, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawMountain = (ctx, x, y, color)=>{\n        // Mountain peaks\n        ctx.beginPath();\n        ctx.moveTo(x - 40, y + 20);\n        ctx.lineTo(x - 20, y - 20);\n        ctx.lineTo(x, y + 10);\n        ctx.lineTo(x + 20, y - 10);\n        ctx.lineTo(x + 40, y + 20);\n        ctx.fill();\n    };\n    const drawVectorMountain = (ctx, x, y, color)=>{\n        // Simple mountain\n        ctx.beginPath();\n        ctx.moveTo(x - 50, y + 30);\n        ctx.lineTo(x - 25, y - 30);\n        ctx.lineTo(x, y + 20);\n        ctx.lineTo(x + 25, y - 20);\n        ctx.lineTo(x + 50, y + 30);\n        ctx.fill();\n    };\n    const drawStar = (ctx, x, y, color)=>{\n        // 5-pointed star\n        ctx.beginPath();\n        for(let i = 0; i < 5; i++){\n            const angle = i * Math.PI * 2 / 5 - Math.PI / 2;\n            const outerX = x + Math.cos(angle) * 30;\n            const outerY = y + Math.sin(angle) * 30;\n            const innerX = x + Math.cos(angle + Math.PI / 5) * 12;\n            const innerY = y + Math.sin(angle + Math.PI / 5) * 12;\n            if (i === 0) ctx.moveTo(outerX, outerY);\n            else ctx.lineTo(outerX, outerY);\n            ctx.lineTo(innerX, innerY);\n        }\n        ctx.closePath();\n        ctx.fill();\n    };\n    const drawVectorStar = (ctx, x, y, color)=>{\n        // Simple star\n        ctx.beginPath();\n        for(let i = 0; i < 5; i++){\n            const angle = i * Math.PI * 2 / 5 - Math.PI / 2;\n            const outerX = x + Math.cos(angle) * 35;\n            const outerY = y + Math.sin(angle) * 35;\n            const innerX = x + Math.cos(angle + Math.PI / 5) * 15;\n            const innerY = y + Math.sin(angle + Math.PI / 5) * 15;\n            if (i === 0) ctx.moveTo(outerX, outerY);\n            else ctx.lineTo(outerX, outerY);\n            ctx.lineTo(innerX, innerY);\n        }\n        ctx.closePath();\n        ctx.fill();\n    };\n    const drawHeart = (ctx, x, y, color)=>{\n        // Heart shape\n        ctx.beginPath();\n        ctx.moveTo(x, y + 10);\n        ctx.bezierCurveTo(x - 20, y - 10, x - 30, y + 5, x, y + 25);\n        ctx.bezierCurveTo(x + 30, y + 5, x + 20, y - 10, x, y + 10);\n        ctx.fill();\n    };\n    const drawVectorHeart = (ctx, x, y, color)=>{\n        // Simple heart\n        ctx.beginPath();\n        ctx.moveTo(x, y + 15);\n        ctx.bezierCurveTo(x - 25, y - 15, x - 35, y + 10, x, y + 30);\n        ctx.bezierCurveTo(x + 35, y + 10, x + 25, y - 15, x, y + 15);\n        ctx.fill();\n    };\n    const drawSun = (ctx, x, y, color)=>{\n        // Sun center\n        ctx.beginPath();\n        ctx.arc(x, y, 20, 0, 2 * Math.PI);\n        ctx.fill();\n        // Sun rays\n        for(let i = 0; i < 8; i++){\n            const angle = i * Math.PI * 2 / 8;\n            const startX = x + Math.cos(angle) * 25;\n            const startY = y + Math.sin(angle) * 25;\n            const endX = x + Math.cos(angle) * 35;\n            const endY = y + Math.sin(angle) * 35;\n            ctx.beginPath();\n            ctx.moveTo(startX, startY);\n            ctx.lineTo(endX, endY);\n            ctx.lineWidth = 4;\n            ctx.stroke();\n        }\n    };\n    const drawVectorSun = (ctx, x, y, color)=>{\n        // Simple sun\n        ctx.beginPath();\n        ctx.arc(x, y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n        for(let i = 0; i < 8; i++){\n            const angle = i * Math.PI * 2 / 8;\n            const startX = x + Math.cos(angle) * 30;\n            const startY = y + Math.sin(angle) * 30;\n            const endX = x + Math.cos(angle) * 40;\n            const endY = y + Math.sin(angle) * 40;\n            ctx.beginPath();\n            ctx.moveTo(startX, startY);\n            ctx.lineTo(endX, endY);\n            ctx.lineWidth = 5;\n            ctx.stroke();\n        }\n    };\n    const drawMoon = (ctx, x, y, color)=>{\n        // Moon crescent\n        ctx.beginPath();\n        ctx.arc(x, y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.fillStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(x + 8, y, 20, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.fillStyle = color;\n    };\n    const drawVectorMoon = (ctx, x, y, color)=>{\n        // Simple moon\n        ctx.beginPath();\n        ctx.arc(x, y, 30, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.fillStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(x + 10, y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.fillStyle = color;\n    };\n    const drawCloud = (ctx, x, y, color)=>{\n        // Cloud shape\n        ctx.beginPath();\n        ctx.arc(x - 15, y, 15, 0, 2 * Math.PI);\n        ctx.arc(x, y - 10, 20, 0, 2 * Math.PI);\n        ctx.arc(x + 15, y, 15, 0, 2 * Math.PI);\n        ctx.arc(x - 5, y + 5, 12, 0, 2 * Math.PI);\n        ctx.arc(x + 10, y + 5, 12, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawVectorCloud = (ctx, x, y, color)=>{\n        // Simple cloud\n        ctx.beginPath();\n        ctx.arc(x - 20, y, 18, 0, 2 * Math.PI);\n        ctx.arc(x, y - 15, 25, 0, 2 * Math.PI);\n        ctx.arc(x + 20, y, 18, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawBall = (ctx, x, y, color)=>{\n        // Ball with highlight\n        ctx.beginPath();\n        ctx.arc(x, y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.fillStyle = \"#fff\";\n        ctx.beginPath();\n        ctx.arc(x - 8, y - 8, 8, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.fillStyle = color;\n    };\n    const drawVectorBall = (ctx, x, y, color)=>{\n        // Simple ball\n        ctx.beginPath();\n        ctx.arc(x, y, 30, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawBook = (ctx, x, y, color)=>{\n        // Book cover\n        ctx.fillRect(x - 20, y - 15, 40, 30);\n        // Book pages\n        ctx.fillStyle = \"#fff\";\n        ctx.fillRect(x - 18, y - 13, 36, 26);\n        // Book spine\n        ctx.fillStyle = color;\n        ctx.fillRect(x - 20, y - 15, 4, 30);\n    };\n    const drawVectorBook = (ctx, x, y, color)=>{\n        // Simple book\n        ctx.fillRect(x - 25, y - 20, 50, 40);\n        ctx.fillStyle = \"#fff\";\n        ctx.fillRect(x - 23, y - 18, 46, 36);\n        ctx.fillStyle = color;\n        ctx.fillRect(x - 25, y - 20, 5, 40);\n    };\n    const drawCup = (ctx, x, y, color)=>{\n        // Cup body\n        ctx.fillRect(x - 15, y - 10, 30, 20);\n        // Cup handle\n        ctx.beginPath();\n        ctx.arc(x + 20, y, 8, 0, Math.PI);\n        ctx.lineWidth = 6;\n        ctx.stroke();\n        // Steam\n        ctx.strokeStyle = \"#666\";\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(x - 5, y - 15);\n        ctx.lineTo(x - 8, y - 25);\n        ctx.moveTo(x, y - 15);\n        ctx.lineTo(x + 3, y - 25);\n        ctx.moveTo(x + 5, y - 15);\n        ctx.lineTo(x + 8, y - 25);\n        ctx.stroke();\n    };\n    const drawVectorCup = (ctx, x, y, color)=>{\n        // Simple cup\n        ctx.fillRect(x - 20, y - 15, 40, 30);\n        ctx.beginPath();\n        ctx.arc(x + 25, y, 10, 0, Math.PI);\n        ctx.lineWidth = 8;\n        ctx.stroke();\n    };\n    const drawBird = (ctx, x, y, color)=>{\n        // Body\n        ctx.beginPath();\n        ctx.ellipse(x, y, 30, 20, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        // Head\n        ctx.beginPath();\n        ctx.arc(x - 20, y - 10, 15, 0, 2 * Math.PI);\n        ctx.fill();\n        // Beak\n        ctx.fillStyle = \"#ffa500\";\n        ctx.beginPath();\n        ctx.moveTo(x - 35, y - 10);\n        ctx.lineTo(x - 45, y - 5);\n        ctx.lineTo(x - 35, y);\n        ctx.fill();\n        // Wings\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.ellipse(x + 10, y - 5, 25, 15, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        // Tail\n        ctx.beginPath();\n        ctx.moveTo(x + 30, y);\n        ctx.lineTo(x + 50, y - 10);\n        ctx.lineTo(x + 50, y + 10);\n        ctx.fill();\n    };\n    const drawVectorBird = (ctx, x, y, color)=>{\n        // Simple geometric bird\n        ctx.beginPath();\n        ctx.ellipse(x, y, 40, 25, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        // Head\n        ctx.beginPath();\n        ctx.arc(x - 25, y - 15, 18, 0, 2 * Math.PI);\n        ctx.fill();\n        // Beak\n        ctx.fillStyle = \"#ffa500\";\n        ctx.beginPath();\n        ctx.moveTo(x - 43, y - 15);\n        ctx.lineTo(x - 55, y - 10);\n        ctx.lineTo(x - 43, y - 5);\n        ctx.fill();\n    };\n    const drawAirplane = (ctx, x, y, color)=>{\n        // Body\n        ctx.fillRect(x - 40, y - 5, 80, 10);\n        // Wings\n        ctx.fillRect(x - 20, y - 20, 40, 8);\n        ctx.fillRect(x - 20, y + 12, 40, 8);\n        // Tail\n        ctx.fillRect(x + 35, y - 15, 15, 8);\n        ctx.fillRect(x + 35, y + 7, 15, 8);\n        // Nose\n        ctx.beginPath();\n        ctx.moveTo(x - 40, y);\n        ctx.lineTo(x - 50, y - 3);\n        ctx.lineTo(x - 50, y + 3);\n        ctx.fill();\n    };\n    const drawVectorAirplane = (ctx, x, y, color)=>{\n        // Clean geometric airplane\n        ctx.fillRect(x - 50, y - 8, 100, 16);\n        ctx.fillRect(x - 25, y - 25, 50, 10);\n        ctx.fillRect(x - 25, y + 15, 50, 10);\n        ctx.fillRect(x + 40, y - 20, 20, 10);\n        ctx.fillRect(x + 40, y + 10, 20, 10);\n    };\n    const drawCar = (ctx, x, y, color)=>{\n        // Body\n        ctx.fillRect(x - 40, y - 15, 80, 30);\n        // Wheels\n        ctx.fillStyle = \"#333\";\n        ctx.beginPath();\n        ctx.arc(x - 25, y + 15, 8, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x + 25, y + 15, 8, 0, 2 * Math.PI);\n        ctx.fill();\n        // Windows\n        ctx.fillStyle = \"#87ceeb\";\n        ctx.fillRect(x - 30, y - 10, 60, 15);\n    };\n    const drawVectorCar = (ctx, x, y, color)=>{\n        // Simple car shape\n        ctx.fillRect(x - 50, y - 20, 100, 40);\n        ctx.fillStyle = \"#333\";\n        ctx.beginPath();\n        ctx.arc(x - 30, y + 20, 12, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x + 30, y + 20, 12, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawTree = (ctx, x, y, color)=>{\n        // Trunk\n        ctx.fillStyle = \"#8b4513\";\n        ctx.fillRect(x - 5, y + 20, 10, 40);\n        // Leaves\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(x, y, 30, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawVectorTree = (ctx, x, y, color)=>{\n        // Geometric tree\n        ctx.fillStyle = \"#8b4513\";\n        ctx.fillRect(x - 8, y + 25, 16, 50);\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(x, y, 35, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawFlower = (ctx, x, y, color)=>{\n        // Stem\n        ctx.fillStyle = \"#228b22\";\n        ctx.fillRect(x - 2, y + 20, 4, 40);\n        // Petals\n        ctx.fillStyle = color;\n        for(let i = 0; i < 6; i++){\n            const angle = i * Math.PI * 2 / 6;\n            const px = x + Math.cos(angle) * 20;\n            const py = y + Math.sin(angle) * 20;\n            ctx.beginPath();\n            ctx.arc(px, py, 8, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n        // Center\n        ctx.fillStyle = \"#ffd700\";\n        ctx.beginPath();\n        ctx.arc(x, y, 8, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawVectorFlower = (ctx, x, y, color)=>{\n        // Simple flower\n        ctx.fillStyle = \"#228b22\";\n        ctx.fillRect(x - 3, y + 25, 6, 50);\n        ctx.fillStyle = color;\n        for(let i = 0; i < 5; i++){\n            const angle = i * Math.PI * 2 / 5;\n            const px = x + Math.cos(angle) * 25;\n            const py = y + Math.sin(angle) * 25;\n            ctx.beginPath();\n            ctx.arc(px, py, 10, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n    };\n    const drawCat = (ctx, x, y, color)=>{\n        // Head\n        ctx.beginPath();\n        ctx.arc(x, y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n        // Ears\n        ctx.beginPath();\n        ctx.moveTo(x - 20, y - 20);\n        ctx.lineTo(x - 30, y - 35);\n        ctx.lineTo(x - 10, y - 25);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.moveTo(x + 20, y - 20);\n        ctx.lineTo(x + 30, y - 35);\n        ctx.lineTo(x + 10, y - 25);\n        ctx.fill();\n        // Eyes\n        ctx.fillStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(x - 10, y - 5, 3, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x + 10, y - 5, 3, 0, 2 * Math.PI);\n        ctx.fill();\n        // Nose\n        ctx.fillStyle = \"#ff69b4\";\n        ctx.beginPath();\n        ctx.arc(x, y, 2, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawVectorCat = (ctx, x, y, color)=>{\n        // Simple cat\n        ctx.beginPath();\n        ctx.arc(x, y, 30, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.moveTo(x - 25, y - 25);\n        ctx.lineTo(x - 35, y - 40);\n        ctx.lineTo(x - 15, y - 30);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.moveTo(x + 25, y - 25);\n        ctx.lineTo(x + 35, y - 40);\n        ctx.lineTo(x + 15, y - 30);\n        ctx.fill();\n    };\n    const drawDog = (ctx, x, y, color)=>{\n        // Head\n        ctx.beginPath();\n        ctx.arc(x, y, 25, 0, 2 * Math.PI);\n        ctx.fill();\n        // Ears\n        ctx.beginPath();\n        ctx.arc(x - 20, y - 15, 8, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x + 20, y - 15, 8, 0, 2 * Math.PI);\n        ctx.fill();\n        // Eyes\n        ctx.fillStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(x - 10, y - 5, 3, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x + 10, y - 5, 3, 0, 2 * Math.PI);\n        ctx.fill();\n        // Nose\n        ctx.fillStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(x, y, 2, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawVectorDog = (ctx, x, y, color)=>{\n        // Simple dog\n        ctx.beginPath();\n        ctx.arc(x, y, 30, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x - 25, y - 20, 10, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(x + 25, y - 20, 10, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawFish = (ctx, x, y, color)=>{\n        // Body\n        ctx.beginPath();\n        ctx.ellipse(x, y, 30, 20, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        // Tail\n        ctx.beginPath();\n        ctx.moveTo(x + 30, y);\n        ctx.lineTo(x + 50, y - 15);\n        ctx.lineTo(x + 50, y + 15);\n        ctx.fill();\n        // Fins\n        ctx.beginPath();\n        ctx.moveTo(x - 20, y - 15);\n        ctx.lineTo(x - 30, y - 25);\n        ctx.lineTo(x - 20, y - 20);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.moveTo(x - 20, y + 15);\n        ctx.lineTo(x - 30, y + 25);\n        ctx.lineTo(x - 20, y + 20);\n        ctx.fill();\n        // Eye\n        ctx.fillStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(x - 10, y - 5, 3, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawVectorFish = (ctx, x, y, color)=>{\n        // Simple fish\n        ctx.beginPath();\n        ctx.ellipse(x, y, 35, 25, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.moveTo(x + 35, y);\n        ctx.lineTo(x + 55, y - 20);\n        ctx.lineTo(x + 55, y + 20);\n        ctx.fill();\n    };\n    const drawButterfly = (ctx, x, y, color)=>{\n        // Body\n        ctx.fillStyle = \"#8b4513\";\n        ctx.fillRect(x - 2, y - 30, 4, 60);\n        // Wings\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.ellipse(x - 20, y - 20, 25, 15, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.ellipse(x + 20, y - 20, 25, 15, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.ellipse(x - 15, y + 10, 20, 12, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.ellipse(x + 15, y + 10, 20, 12, 0, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawVectorButterfly = (ctx, x, y, color)=>{\n        // Simple butterfly\n        ctx.fillStyle = \"#8b4513\";\n        ctx.fillRect(x - 3, y - 35, 6, 70);\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.ellipse(x - 25, y - 25, 30, 20, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.ellipse(x + 25, y - 25, 30, 20, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.ellipse(x - 20, y + 15, 25, 15, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.ellipse(x + 20, y + 15, 25, 15, 0, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawGenericShape = (ctx, x, y, color)=>{\n        // Default shape\n        ctx.beginPath();\n        ctx.arc(x, y, 40, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const drawHouse = (ctx, x, y, color)=>{\n        // House body\n        ctx.fillRect(x - 30, y - 10, 60, 40);\n        // Roof\n        ctx.beginPath();\n        ctx.moveTo(x - 35, y - 10);\n        ctx.lineTo(x, y - 25);\n        ctx.lineTo(x + 35, y - 10);\n        ctx.fill();\n        // Door\n        ctx.fillStyle = \"#8b4513\";\n        ctx.fillRect(x - 8, y + 10, 16, 20);\n        // Windows\n        ctx.fillStyle = \"#87ceeb\";\n        ctx.fillRect(x - 20, y - 5, 12, 12);\n        ctx.fillRect(x + 8, y - 5, 12, 12);\n    };\n    const drawVectorHouse = (ctx, x, y, color)=>{\n        // Simple house\n        ctx.fillRect(x - 40, y - 15, 80, 50);\n        ctx.beginPath();\n        ctx.moveTo(x - 45, y - 15);\n        ctx.lineTo(x, y - 30);\n        ctx.lineTo(x + 45, y - 15);\n        ctx.fill();\n    };\n    const drawVectorGenericShape = (ctx, x, y, color)=>{\n        // Default vector shape\n        ctx.beginPath();\n        ctx.arc(x, y, 45, 0, 2 * Math.PI);\n        ctx.fill();\n    };\n    const handleGenVector = async ()=>{\n        if (!prompt.trim()) {\n            console.log(\"No prompt provided\");\n            return;\n        }\n        console.log(\"\\uD83D\\uDE80 Starting vector generation for prompt:\", prompt);\n        try {\n            const generatedImage = await generateImageFromPrompt(prompt, \"vector\");\n            console.log(\"✅ Generated image successfully:\", generatedImage.substring(0, 50) + \"...\");\n            setPreview(generatedImage);\n            setHistoryImgs((h)=>[\n                    generatedImage,\n                    ...h\n                ].slice(0, 20));\n        } catch (error) {\n            console.error(\"❌ Error generating vector:\", error);\n            alert(\"Error generating image: \" + error.message);\n        }\n    };\n    const handleGenPng = async ()=>{\n        if (!prompt.trim()) {\n            console.log(\"No prompt provided\");\n            return;\n        }\n        console.log(\"\\uD83D\\uDE80 Starting PNG generation for prompt:\", prompt);\n        try {\n            const generatedImage = await generateImageFromPrompt(prompt, \"png\");\n            console.log(\"✅ Generated image successfully:\", generatedImage.substring(0, 50) + \"...\");\n            setPreview(generatedImage);\n            setHistoryImgs((h)=>[\n                    generatedImage,\n                    ...h\n                ].slice(0, 20));\n        } catch (error) {\n            console.error(\"❌ Error generating PNG:\", error);\n            alert(\"Error generating image: \" + error.message);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n        className: \"min-h-screen w-full bg-black flex items-start justify-center overflow-auto\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            style: {\n                width: baseW,\n                height: baseH,\n                transform: \"scale(\".concat(scale, \")\"),\n                transformOrigin: \"top center\"\n            },\n            onMouseMove: onMove,\n            onMouseUp: endDrag,\n            className: \"jsx-2ad0347cf2e52671\" + \" \" + \"relative overflow-hidden\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default()), {\n                    id: \"2ad0347cf2e52671\",\n                    children: \".scrollbox{scrollbar-width:thin;scrollbar-color:#000080#0000}.scrollbox::-webkit-scrollbar{width:12px;height:12px;background:transparent}.scrollbox::-webkit-scrollbar-track{background:transparent}.scrollbox::-webkit-scrollbar-thumb{background:#000080;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;border:1px solid rgba(255,255,255,.1)}.scrollbox::-webkit-scrollbar-thumb:hover{background:#00a}\"\n                }, void 0, false, void 0, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                    ref: bgRef,\n                    src: BG,\n                    alt: \"\",\n                    onLoad: (e)=>{\n                        const img = e.currentTarget;\n                        const w = img.naturalWidth || DESIGN_W;\n                        const h = img.naturalHeight || DESIGN_H;\n                        setBaseW(w);\n                        setBaseH(h);\n                        recalcScale(w);\n                    },\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute inset-0 w-full h-full object-cover z-0 pointer-events-none\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1362,\n                    columnNumber: 6\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                    src: UI,\n                    alt: \"\",\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute inset-0 w-full h-full object-contain z-10 pointer-events-none\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1376,\n                    columnNumber: 6\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        ...toStyle(rects.prompt),\n                        borderRadius: 16\n                    },\n                    onMouseDown: (e)=>startDrag(e, \"prompt\"),\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute z-20 overflow-auto scrollbox \".concat(calib ? \"outline outline-2 outline-yellow-400\" : \"\"),\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n                        style: {\n                            fontSize: \"13px\",\n                            color: \"#000080\",\n                            padding: \"6px 10px\",\n                            whiteSpace: \"pre-wrap\",\n                            wordBreak: \"break-word\",\n                            overflowWrap: \"anywhere\",\n                            boxSizing: \"border-box\"\n                        },\n                        value: prompt,\n                        onChange: (e)=>setPrompt(e.target.value),\n                        wrap: \"soft\",\n                        className: \"jsx-2ad0347cf2e52671\" + \" \" + \"w-full h-full bg-transparent outline-none resize-none border-0 scrollbox\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                        lineNumber: 1380,\n                        columnNumber: 7\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1379,\n                    columnNumber: 6\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    style: {\n                        ...toStyle(rects.vecBtn),\n                        background: \"transparent\",\n                        cursor: \"pointer\"\n                    },\n                    onMouseDown: (e)=>startDrag(e, \"vecBtn\"),\n                    onClick: handleGenVector,\n                    \"aria-label\": \"Gerar Vetor\",\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute z-20 \".concat(calib ? \"outline outline-2 outline-yellow-400\" : \"\")\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1384,\n                    columnNumber: 6\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    style: {\n                        ...toStyle(rects.pngBtn),\n                        background: \"transparent\",\n                        cursor: \"pointer\"\n                    },\n                    onMouseDown: (e)=>startDrag(e, \"pngBtn\"),\n                    onClick: handleGenPng,\n                    \"aria-label\": \"Gerar PNG\",\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute z-20 \".concat(calib ? \"outline outline-2 outline-yellow-400\" : \"\")\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1385,\n                    columnNumber: 6\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        ...toStyle(rects.hist)\n                    },\n                    onMouseDown: (e)=>startDrag(e, \"hist\"),\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute z-20 overflow-auto scrollbox \".concat(calib ? \"outline outline-2 outline-yellow-400\" : \"\"),\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"jsx-2ad0347cf2e52671\" + \" \" + \"grid grid-cols-1 gap-2\",\n                        children: historyImgs.map((src, idx)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                src: src,\n                                alt: \"hist-\" + idx,\n                                onClick: ()=>setPreview(src),\n                                className: \"jsx-2ad0347cf2e52671\" + \" \" + \"w-full h-24 object-cover rounded cursor-pointer\"\n                            }, idx, false, {\n                                fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                                lineNumber: 1391,\n                                columnNumber: 9\n                            }, this))\n                    }, void 0, false, {\n                        fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                        lineNumber: 1389,\n                        columnNumber: 7\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1388,\n                    columnNumber: 6\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: ()=>setCalib((v)=>!v),\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute z-30 bottom-2 right-2 bg-white/70 text-black px-3 py-1 rounded\",\n                    children: calib ? \"Lock\" : \"Calibrate\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1398,\n                    columnNumber: 6\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: ()=>window.location.href = \"/advanced\",\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute z-30 bottom-2 left-2 bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition-colors\",\n                    children: \"Advanced Studio\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1401,\n                    columnNumber: 6\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: ()=>window.location.href = \"/stage2\",\n                    className: \"jsx-2ad0347cf2e52671\" + \" \" + \"absolute z-30 bottom-2 left-40 bg-indigo-600 text-white px-3 py-1 rounded hover:bg-indigo-700 transition-colors\",\n                    children: \"Stage 2\"\n                }, void 0, false, {\n                    fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n                    lineNumber: 1408,\n                    columnNumber: 7\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n            lineNumber: 1354,\n            columnNumber: 5\n        }, this)\n    }, void 0, false, {\n        fileName: \"D:\\\\Giramille\\\\Giramille-Clean\\\\frontend\\\\app\\\\page.tsx\",\n        lineNumber: 1353,\n        columnNumber: 4\n    }, this);\n}\n_s(HomePage, \"mSJsiuL3USbVw2ZSkpeTOoa5/+c=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/styled-jsx/dist/index/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/styled-jsx/dist/index/index.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n__webpack_require__(/*! client-only */ \"(app-pages-browser)/./node_modules/next/dist/compiled/client-only/index.js\");\nvar React = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nvar React__default = /*#__PURE__*/ _interopDefaultLegacy(React);\n_c = React__default;\n/*\nBased on Glamor's sheet\nhttps://github.com/threepointone/glamor/blob/667b480d31b3721a905021b26e1290ce92ca2879/src/sheet.js\n*/ function _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nvar isProd = typeof process !== \"undefined\" && process.env && \"development\" === \"production\";\nvar isString = function(o) {\n    return Object.prototype.toString.call(o) === \"[object String]\";\n};\nvar StyleSheet = /*#__PURE__*/ function() {\n    function StyleSheet(param) {\n        var ref = param === void 0 ? {} : param, _name = ref.name, name = _name === void 0 ? \"stylesheet\" : _name, _optimizeForSpeed = ref.optimizeForSpeed, optimizeForSpeed = _optimizeForSpeed === void 0 ? isProd : _optimizeForSpeed;\n        invariant$1(isString(name), \"`name` must be a string\");\n        this._name = name;\n        this._deletedRulePlaceholder = \"#\" + name + \"-deleted-rule____{}\";\n        invariant$1(typeof optimizeForSpeed === \"boolean\", \"`optimizeForSpeed` must be a boolean\");\n        this._optimizeForSpeed = optimizeForSpeed;\n        this._serverSheet = undefined;\n        this._tags = [];\n        this._injected = false;\n        this._rulesCount = 0;\n        var node = typeof window !== \"undefined\" && document.querySelector('meta[property=\"csp-nonce\"]');\n        this._nonce = node ? node.getAttribute(\"content\") : null;\n    }\n    var _proto = StyleSheet.prototype;\n    _proto.setOptimizeForSpeed = function setOptimizeForSpeed(bool) {\n        invariant$1(typeof bool === \"boolean\", \"`setOptimizeForSpeed` accepts a boolean\");\n        invariant$1(this._rulesCount === 0, \"optimizeForSpeed cannot be when rules have already been inserted\");\n        this.flush();\n        this._optimizeForSpeed = bool;\n        this.inject();\n    };\n    _proto.isOptimizeForSpeed = function isOptimizeForSpeed() {\n        return this._optimizeForSpeed;\n    };\n    _proto.inject = function inject() {\n        var _this = this;\n        invariant$1(!this._injected, \"sheet already injected\");\n        this._injected = true;\n        if (typeof window !== \"undefined\" && this._optimizeForSpeed) {\n            this._tags[0] = this.makeStyleTag(this._name);\n            this._optimizeForSpeed = \"insertRule\" in this.getSheet();\n            if (!this._optimizeForSpeed) {\n                if (!isProd) {\n                    console.warn(\"StyleSheet: optimizeForSpeed mode not supported falling back to standard mode.\");\n                }\n                this.flush();\n                this._injected = true;\n            }\n            return;\n        }\n        this._serverSheet = {\n            cssRules: [],\n            insertRule: function(rule, index) {\n                if (typeof index === \"number\") {\n                    _this._serverSheet.cssRules[index] = {\n                        cssText: rule\n                    };\n                } else {\n                    _this._serverSheet.cssRules.push({\n                        cssText: rule\n                    });\n                }\n                return index;\n            },\n            deleteRule: function(index) {\n                _this._serverSheet.cssRules[index] = null;\n            }\n        };\n    };\n    _proto.getSheetForTag = function getSheetForTag(tag) {\n        if (tag.sheet) {\n            return tag.sheet;\n        }\n        // this weirdness brought to you by firefox\n        for(var i = 0; i < document.styleSheets.length; i++){\n            if (document.styleSheets[i].ownerNode === tag) {\n                return document.styleSheets[i];\n            }\n        }\n    };\n    _proto.getSheet = function getSheet() {\n        return this.getSheetForTag(this._tags[this._tags.length - 1]);\n    };\n    _proto.insertRule = function insertRule(rule, index) {\n        invariant$1(isString(rule), \"`insertRule` accepts only strings\");\n        if (typeof window === \"undefined\") {\n            if (typeof index !== \"number\") {\n                index = this._serverSheet.cssRules.length;\n            }\n            this._serverSheet.insertRule(rule, index);\n            return this._rulesCount++;\n        }\n        if (this._optimizeForSpeed) {\n            var sheet = this.getSheet();\n            if (typeof index !== \"number\") {\n                index = sheet.cssRules.length;\n            }\n            // this weirdness for perf, and chrome's weird bug\n            // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule\n            try {\n                sheet.insertRule(rule, index);\n            } catch (error) {\n                if (!isProd) {\n                    console.warn(\"StyleSheet: illegal rule: \\n\\n\" + rule + \"\\n\\nSee https://stackoverflow.com/q/20007992 for more info\");\n                }\n                return -1;\n            }\n        } else {\n            var insertionPoint = this._tags[index];\n            this._tags.push(this.makeStyleTag(this._name, rule, insertionPoint));\n        }\n        return this._rulesCount++;\n    };\n    _proto.replaceRule = function replaceRule(index, rule) {\n        if (this._optimizeForSpeed || typeof window === \"undefined\") {\n            var sheet = typeof window !== \"undefined\" ? this.getSheet() : this._serverSheet;\n            if (!rule.trim()) {\n                rule = this._deletedRulePlaceholder;\n            }\n            if (!sheet.cssRules[index]) {\n                // @TBD Should we throw an error?\n                return index;\n            }\n            sheet.deleteRule(index);\n            try {\n                sheet.insertRule(rule, index);\n            } catch (error) {\n                if (!isProd) {\n                    console.warn(\"StyleSheet: illegal rule: \\n\\n\" + rule + \"\\n\\nSee https://stackoverflow.com/q/20007992 for more info\");\n                }\n                // In order to preserve the indices we insert a deleteRulePlaceholder\n                sheet.insertRule(this._deletedRulePlaceholder, index);\n            }\n        } else {\n            var tag = this._tags[index];\n            invariant$1(tag, \"old rule at index `\" + index + \"` not found\");\n            tag.textContent = rule;\n        }\n        return index;\n    };\n    _proto.deleteRule = function deleteRule(index) {\n        if (typeof window === \"undefined\") {\n            this._serverSheet.deleteRule(index);\n            return;\n        }\n        if (this._optimizeForSpeed) {\n            this.replaceRule(index, \"\");\n        } else {\n            var tag = this._tags[index];\n            invariant$1(tag, \"rule at index `\" + index + \"` not found\");\n            tag.parentNode.removeChild(tag);\n            this._tags[index] = null;\n        }\n    };\n    _proto.flush = function flush() {\n        this._injected = false;\n        this._rulesCount = 0;\n        if (typeof window !== \"undefined\") {\n            this._tags.forEach(function(tag) {\n                return tag && tag.parentNode.removeChild(tag);\n            });\n            this._tags = [];\n        } else {\n            // simpler on server\n            this._serverSheet.cssRules = [];\n        }\n    };\n    _proto.cssRules = function cssRules() {\n        var _this = this;\n        if (typeof window === \"undefined\") {\n            return this._serverSheet.cssRules;\n        }\n        return this._tags.reduce(function(rules, tag) {\n            if (tag) {\n                rules = rules.concat(Array.prototype.map.call(_this.getSheetForTag(tag).cssRules, function(rule) {\n                    return rule.cssText === _this._deletedRulePlaceholder ? null : rule;\n                }));\n            } else {\n                rules.push(null);\n            }\n            return rules;\n        }, []);\n    };\n    _proto.makeStyleTag = function makeStyleTag(name, cssString, relativeToTag) {\n        if (cssString) {\n            invariant$1(isString(cssString), \"makeStyleTag accepts only strings as second parameter\");\n        }\n        var tag = document.createElement(\"style\");\n        if (this._nonce) tag.setAttribute(\"nonce\", this._nonce);\n        tag.type = \"text/css\";\n        tag.setAttribute(\"data-\" + name, \"\");\n        if (cssString) {\n            tag.appendChild(document.createTextNode(cssString));\n        }\n        var head = document.head || document.getElementsByTagName(\"head\")[0];\n        if (relativeToTag) {\n            head.insertBefore(tag, relativeToTag);\n        } else {\n            head.appendChild(tag);\n        }\n        return tag;\n    };\n    _createClass(StyleSheet, [\n        {\n            key: \"length\",\n            get: function get() {\n                return this._rulesCount;\n            }\n        }\n    ]);\n    return StyleSheet;\n}();\nfunction invariant$1(condition, message) {\n    if (!condition) {\n        throw new Error(\"StyleSheet: \" + message + \".\");\n    }\n}\nfunction hash(str) {\n    var _$hash = 5381, i = str.length;\n    while(i){\n        _$hash = _$hash * 33 ^ str.charCodeAt(--i);\n    }\n    /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */ return _$hash >>> 0;\n}\nvar stringHash = hash;\nvar sanitize = function(rule) {\n    return rule.replace(/\\/style/gi, \"\\\\/style\");\n};\nvar cache = {};\n/**\n * computeId\n *\n * Compute and memoize a jsx id from a basedId and optionally props.\n */ function computeId(baseId, props) {\n    if (!props) {\n        return \"jsx-\" + baseId;\n    }\n    var propsToString = String(props);\n    var key = baseId + propsToString;\n    if (!cache[key]) {\n        cache[key] = \"jsx-\" + stringHash(baseId + \"-\" + propsToString);\n    }\n    return cache[key];\n}\n/**\n * computeSelector\n *\n * Compute and memoize dynamic selectors.\n */ function computeSelector(id, css) {\n    var selectoPlaceholderRegexp = /__jsx-style-dynamic-selector/g;\n    // Sanitize SSR-ed CSS.\n    // Client side code doesn't need to be sanitized since we use\n    // document.createTextNode (dev) and the CSSOM api sheet.insertRule (prod).\n    if (typeof window === \"undefined\") {\n        css = sanitize(css);\n    }\n    var idcss = id + css;\n    if (!cache[idcss]) {\n        cache[idcss] = css.replace(selectoPlaceholderRegexp, id);\n    }\n    return cache[idcss];\n}\nfunction mapRulesToStyle(cssRules, options) {\n    if (options === void 0) options = {};\n    return cssRules.map(function(args) {\n        var id = args[0];\n        var css = args[1];\n        return /*#__PURE__*/ React__default[\"default\"].createElement(\"style\", {\n            id: \"__\" + id,\n            // Avoid warnings upon render with a key\n            key: \"__\" + id,\n            nonce: options.nonce ? options.nonce : undefined,\n            dangerouslySetInnerHTML: {\n                __html: css\n            }\n        });\n    });\n}\nvar StyleSheetRegistry = /*#__PURE__*/ function() {\n    function StyleSheetRegistry(param) {\n        var ref = param === void 0 ? {} : param, _styleSheet = ref.styleSheet, styleSheet = _styleSheet === void 0 ? null : _styleSheet, _optimizeForSpeed = ref.optimizeForSpeed, optimizeForSpeed = _optimizeForSpeed === void 0 ? false : _optimizeForSpeed;\n        this._sheet = styleSheet || new StyleSheet({\n            name: \"styled-jsx\",\n            optimizeForSpeed: optimizeForSpeed\n        });\n        this._sheet.inject();\n        if (styleSheet && typeof optimizeForSpeed === \"boolean\") {\n            this._sheet.setOptimizeForSpeed(optimizeForSpeed);\n            this._optimizeForSpeed = this._sheet.isOptimizeForSpeed();\n        }\n        this._fromServer = undefined;\n        this._indices = {};\n        this._instancesCounts = {};\n    }\n    var _proto = StyleSheetRegistry.prototype;\n    _proto.add = function add(props) {\n        var _this = this;\n        if (undefined === this._optimizeForSpeed) {\n            this._optimizeForSpeed = Array.isArray(props.children);\n            this._sheet.setOptimizeForSpeed(this._optimizeForSpeed);\n            this._optimizeForSpeed = this._sheet.isOptimizeForSpeed();\n        }\n        if (typeof window !== \"undefined\" && !this._fromServer) {\n            this._fromServer = this.selectFromServer();\n            this._instancesCounts = Object.keys(this._fromServer).reduce(function(acc, tagName) {\n                acc[tagName] = 0;\n                return acc;\n            }, {});\n        }\n        var ref = this.getIdAndRules(props), styleId = ref.styleId, rules = ref.rules;\n        // Deduping: just increase the instances count.\n        if (styleId in this._instancesCounts) {\n            this._instancesCounts[styleId] += 1;\n            return;\n        }\n        var indices = rules.map(function(rule) {\n            return _this._sheet.insertRule(rule);\n        }) // Filter out invalid rules\n        .filter(function(index) {\n            return index !== -1;\n        });\n        this._indices[styleId] = indices;\n        this._instancesCounts[styleId] = 1;\n    };\n    _proto.remove = function remove(props) {\n        var _this = this;\n        var styleId = this.getIdAndRules(props).styleId;\n        invariant(styleId in this._instancesCounts, \"styleId: `\" + styleId + \"` not found\");\n        this._instancesCounts[styleId] -= 1;\n        if (this._instancesCounts[styleId] < 1) {\n            var tagFromServer = this._fromServer && this._fromServer[styleId];\n            if (tagFromServer) {\n                tagFromServer.parentNode.removeChild(tagFromServer);\n                delete this._fromServer[styleId];\n            } else {\n                this._indices[styleId].forEach(function(index) {\n                    return _this._sheet.deleteRule(index);\n                });\n                delete this._indices[styleId];\n            }\n            delete this._instancesCounts[styleId];\n        }\n    };\n    _proto.update = function update(props, nextProps) {\n        this.add(nextProps);\n        this.remove(props);\n    };\n    _proto.flush = function flush() {\n        this._sheet.flush();\n        this._sheet.inject();\n        this._fromServer = undefined;\n        this._indices = {};\n        this._instancesCounts = {};\n    };\n    _proto.cssRules = function cssRules() {\n        var _this = this;\n        var fromServer = this._fromServer ? Object.keys(this._fromServer).map(function(styleId) {\n            return [\n                styleId,\n                _this._fromServer[styleId]\n            ];\n        }) : [];\n        var cssRules = this._sheet.cssRules();\n        return fromServer.concat(Object.keys(this._indices).map(function(styleId) {\n            return [\n                styleId,\n                _this._indices[styleId].map(function(index) {\n                    return cssRules[index].cssText;\n                }).join(_this._optimizeForSpeed ? \"\" : \"\\n\")\n            ];\n        }) // filter out empty rules\n        .filter(function(rule) {\n            return Boolean(rule[1]);\n        }));\n    };\n    _proto.styles = function styles(options) {\n        return mapRulesToStyle(this.cssRules(), options);\n    };\n    _proto.getIdAndRules = function getIdAndRules(props) {\n        var css = props.children, dynamic = props.dynamic, id = props.id;\n        if (dynamic) {\n            var styleId = computeId(id, dynamic);\n            return {\n                styleId: styleId,\n                rules: Array.isArray(css) ? css.map(function(rule) {\n                    return computeSelector(styleId, rule);\n                }) : [\n                    computeSelector(styleId, css)\n                ]\n            };\n        }\n        return {\n            styleId: computeId(id),\n            rules: Array.isArray(css) ? css : [\n                css\n            ]\n        };\n    };\n    /**\n   * selectFromServer\n   *\n   * Collects style tags from the document with id __jsx-XXX\n   */ _proto.selectFromServer = function selectFromServer() {\n        var elements = Array.prototype.slice.call(document.querySelectorAll('[id^=\"__jsx-\"]'));\n        return elements.reduce(function(acc, element) {\n            var id = element.id.slice(2);\n            acc[id] = element;\n            return acc;\n        }, {});\n    };\n    return StyleSheetRegistry;\n}();\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(\"StyleSheetRegistry: \" + message + \".\");\n    }\n}\nvar StyleSheetContext = /*#__PURE__*/ React.createContext(null);\nStyleSheetContext.displayName = \"StyleSheetContext\";\nfunction createStyleRegistry() {\n    return new StyleSheetRegistry();\n}\nfunction StyleRegistry(param) {\n    _s();\n    var configuredRegistry = param.registry, children = param.children;\n    var rootRegistry = React.useContext(StyleSheetContext);\n    var ref = React.useState(function() {\n        return rootRegistry || configuredRegistry || createStyleRegistry();\n    }), registry = ref[0];\n    return /*#__PURE__*/ React__default[\"default\"].createElement(StyleSheetContext.Provider, {\n        value: registry\n    }, children);\n}\n_s(StyleRegistry, \"vgRS4YV7PcSMQCYHzGaNuBIBcZQ=\");\n_c1 = StyleRegistry;\nfunction useStyleRegistry() {\n    _s1();\n    return React.useContext(StyleSheetContext);\n}\n_s1(useStyleRegistry, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n// Opt-into the new `useInsertionEffect` API in React 18, fallback to `useLayoutEffect`.\n// https://github.com/reactwg/react-18/discussions/110\nvar useInsertionEffect = React__default[\"default\"].useInsertionEffect || React__default[\"default\"].useLayoutEffect;\nvar defaultRegistry = typeof window !== \"undefined\" ? createStyleRegistry() : undefined;\nfunction JSXStyle(props) {\n    _s2();\n    var registry = defaultRegistry ? defaultRegistry : useStyleRegistry();\n    // If `registry` does not exist, we do nothing here.\n    if (!registry) {\n        return null;\n    }\n    if (typeof window === \"undefined\") {\n        registry.add(props);\n        return null;\n    }\n    useInsertionEffect(function() {\n        registry.add(props);\n        return function() {\n            registry.remove(props);\n        };\n    // props.children can be string[], will be striped since id is identical\n    }, [\n        props.id,\n        String(props.dynamic)\n    ]);\n    return null;\n}\n_s2(JSXStyle, \"48Sqj1BUqkshsPdz6NEWXDn8pF4=\", false, function() {\n    return [\n        useStyleRegistry,\n        useInsertionEffect\n    ];\n});\n_c2 = JSXStyle;\nJSXStyle.dynamic = function(info) {\n    return info.map(function(tagInfo) {\n        var baseId = tagInfo[0];\n        var props = tagInfo[1];\n        return computeId(baseId, props);\n    }).join(\" \");\n};\nexports.StyleRegistry = StyleRegistry;\nexports.createStyleRegistry = createStyleRegistry;\nexports.style = JSXStyle;\nexports.useStyleRegistry = useStyleRegistry;\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"React__default\");\n$RefreshReg$(_c1, \"StyleRegistry\");\n$RefreshReg$(_c2, \"JSXStyle\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/styled-jsx/dist/index/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/styled-jsx/style.js":
/*!******************************************!*\
  !*** ./node_modules/styled-jsx/style.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = __webpack_require__(/*! ./dist/index */ \"(app-pages-browser)/./node_modules/styled-jsx/dist/index/index.js\").style;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHlsZWQtanN4L3N0eWxlLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsbUlBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdHlsZWQtanN4L3N0eWxlLmpzPzM3MGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvaW5kZXgnKS5zdHlsZVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwic3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/styled-jsx/style.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/YmUwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22D%3A%5C%5CGiramille%5C%5CGiramille-Clean%5C%5Cfrontend%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);